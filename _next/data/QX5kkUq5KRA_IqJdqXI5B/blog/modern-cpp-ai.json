{"pageProps":{"postMetadata":{"title":"Modern C++ for ExaScale AI.","description":"Building AI application using collection of C++ libraries and AI frameworks.","imgName":"modern-cpp-for-ai/cpp-libraries.jpeg","date":"Jan 15, 2023","tags":["AI","ML","C++"],"keywords":["AI","ML","C++","programming"],"id":"modern-cpp-ai"},"postContent":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    em: \"em\",\n    h2: \"h2\",\n    h6: \"h6\",\n    img: \"img\",\n    li: \"li\",\n    ol: \"ol\",\n    p: \"p\",\n    pre: \"pre\",\n    strong: \"strong\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"modern-cpp-for-ai/cpp-libraries.jpeg\",\n        alt: \"\\\"Building AI application using collection of C++ libraries and AI frameworks\\\"\"\n      })\n    }), \"\\n\", _jsxs(_components.h6, {\n      id: \"published-on-jan-15-2023\",\n      children: [\"Published on: \", _jsx(_components.strong, {\n        children: \"Jan 15, 2023\"\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"outline\",\n      children: \"Outline:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"[X] Introduction (This one)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"[X] Package Managers (conan) and Build systems (cmake)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"[X] C++ Computer vision demo projects: Haar and HOG (added to git repo and referenced here).\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"[ ] Visual search & recommendation engine for ExaScale\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"introduction\",\n      children: \"Introduction\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"C++ is a powerful programming language that can be used for a wide range of applications, including AI. One of the reasons why it is well-suited for these tasks is that it offers a high level of control over the underlying hardware, which can be important for optimizing performance on edge devices and embedded systems. C++  language, on low-power edge devices,   allows for more efficient use of memory and other resources on devices with limited resources. Additionally, C++ has a rich set of libraries and frameworks that can be used for machine learning and other AI-related tasks, such as PyTorch, TensorFlow, Faiss, dlib,  OpenCV, and many more.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To complement the rapid development of AI systems we have a plethora of libraries available in the C++ ecosystem. Here is a list (not exhaustive) of some C++ libraries for AI development:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"TensorFlow: \", _jsx(_components.a, {\n          href: \"https://github.com/tensorflow/tensorflow\",\n          children: \"https://github.com/tensorflow/tensorflow\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"PyTorch: \", _jsx(_components.a, {\n          href: \"https://github.com/pytorch/pytorch\",\n          children: \"https://github.com/pytorch/pytorch\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"dlib: \", _jsx(_components.a, {\n          href: \"https://github.com/davisking/dlib\",\n          children: \"https://github.com/davisking/dlib\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Eigen: \", _jsx(_components.a, {\n          href: \"https://github.com/eigenteam/eigen-git-mirror\",\n          children: \"https://github.com/eigenteam/eigen-git-mirror\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"OpenCV: \", _jsx(_components.a, {\n          href: \"https://github.com/opencv/opencv\",\n          children: \"https://github.com/opencv/opencv\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"CatBoost: \", _jsx(_components.a, {\n          href: \"https://github.com/catboost/catboost\",\n          children: \"https://github.com/catboost/catboost\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"ArmNN: \", _jsx(_components.a, {\n          href: \"https://github.com/Arm-software/ArmNN\",\n          children: \"https://github.com/Arm-software/ArmNN\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"lightgbm: \", _jsx(_components.a, {\n          href: \"https://github.com/microsoft/LightGBM\",\n          children: \"https://github.com/microsoft/LightGBM\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"mlpack: \", _jsx(_components.a, {\n          href: \"https://github.com/mlpack/mlpack\",\n          children: \"https://github.com/mlpack/mlpack\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Faiss: \", _jsx(_components.a, {\n          href: \"https://github.com/facebookresearch/faiss\",\n          children: \"https://github.com/facebookresearch/faiss\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"shogun: \", _jsx(_components.a, {\n          href: \"https://github.com/shogun-toolbox/shogun\",\n          children: \"https://github.com/shogun-toolbox/shogun\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"GRT (Gesture Recognition Toolkit): \", _jsx(_components.a, {\n          href: \"https://github.com/nickgillian/grt\",\n          children: \"https://github.com/nickgillian/grt\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"MXNet: \", _jsx(_components.a, {\n          href: \"https://github.com/apache/incubator-mxnet\",\n          children: \"https://github.com/apache/incubator-mxnet\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Armadillo: \", _jsx(_components.a, {\n          href: \"http://arma.sourceforge.net/\",\n          children: \"http://arma.sourceforge.net/\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"MLPACK: \", _jsx(_components.a, {\n          href: \"https://github.com/mlpack/mlpack\",\n          children: \"https://github.com/mlpack/mlpack\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"XGboost: \", _jsx(_components.a, {\n          href: \"https://github.com/dmlc/xgboost\",\n          children: \"https://github.com/dmlc/xgboost\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Shark: \", _jsx(_components.a, {\n          href: \"https://github.com/Shark-ML/Shark\",\n          children: \"https://github.com/Shark-ML/Shark\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"CNTK: \", _jsx(_components.a, {\n          href: \"https://github.com/Microsoft/CNTK\",\n          children: \"https://github.com/Microsoft/CNTK\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"ONNX: \", _jsx(_components.a, {\n          href: \"https://github.com/onnx/onnx\",\n          children: \"https://github.com/onnx/onnx\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"There are many other libraries and framworks, however, some of them are not in active development or have been merged/included with the popular frameworks mentioned above.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"For example, PyTorch (LibTorch) is written in C++, this is designed to address the use cases where the use of the Python is infeasible due to performance and portability requirements, such as in low latency, high performance or multithreaded environments, such as embedded systems, video games or production servers. With LibTorch, ML engineers can build and deploy their models in C++ environments, such as native mobile and embedded systems, or in multithreaded environments with strict latency requirements.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"why-c-for-ai-on-edge-devices\",\n      children: \"Why C++ for AI on Edge Devices?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"C++ offers several advantages for AI development on edge devices:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Performance: C++ provides low-level control, allowing for optimized memory usage and efficient resource management.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Portability: C++ code can be compiled for various architectures, making it ideal for diverse edge devices.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Rich Ecosystem: A wide range of AI libraries and frameworks are available in C++.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Hardware Optimization: C++ allows direct hardware optimization, crucial for resource-constrained edge devices.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"project-setup-for-a-dummy-project\",\n      children: \"Project setup for a dummy project\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"I will use a simple structure for this application. Here is the output of the tree command to get the folder structure (pre-build stage)\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-text\",\n        children: \"|____APP\\n\\t |____application.cpp\\n\\t |____application.h\\n\\t |____CMakeLists.txt\\n\\t |____conanfile.txt\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"conan\",\n      children: \"Conan\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"https://conan.io/\",\n        children: \"Conan\"\n      }), \" is a package manager for C++. It is used to manage and distribute dependencies in your C++ projects. To install Conan, you need to have Python installed on your system (I am using python 3.9). Conan provides packages via \", _jsx(_components.a, {\n        href: \"https://conan.io/center/\",\n        children: \"Conan center\"\n      }), \", which is a repository of prebuilt binaries for various machine architectures, that the Conan python client uses to download the required packages.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Here are the steps to install Conan on your system:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"Install the Conan CLI: You can install Conan using pip, which is the Python package manager. To do this, open the terminal and run the \", _jsx(_components.strong, {\n            children: \"pip install conan\"\n          }), \" command.\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"Configure Conan: After installing Conan, you need to configure it to work with your system. You can do this by running \", _jsx(_components.strong, {\n            children: \"conan config install\"\n          }), \" command.\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"Add remote repository: By default, Conan doesn't have any remote repositories to search packages. You can add a remote repository to search packages. For example, you can add the Conan center repository, which is the default public repository for Conan packages, by running the **conan remote add conan-center https://center.conan.io ** command.\"\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For more details about Conan check the \", _jsx(_components.a, {\n        href: \"https://academy.jfrog.com/path/conan\",\n        children: \"Jfrog's conan\"\n      }), \" course and/or \", _jsx(_components.a, {\n        href: \"https://docs.conan.io/en/latest/\",\n        children: \"Conan documentation\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Setting \", _jsx(_components.em, {\n        children: \"conanfile.txt\"\n      }), \":\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To use Conan in your project, you need to create a \", _jsx(_components.em, {\n        children: \"conanfile.txt\"\n      }), \" file in our project root directory. This file will contain information about your project's dependencies (open cv and dlib). Here's an example \", _jsx(_components.em, {\n        children: \"conanfile.txt\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-text\",\n        children: \"[requires]\\nopencv/4.5.5\\n[generators]\\ncmake\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Note\"\n      }), \": I only have \", _jsx(_components.em, {\n        children: \"opencv\"\n      }), \" as a dependency;  getting \", _jsx(_components.em, {\n        children: \"dlib\"\n      }), \" to work with my \", _jsx(_components.em, {\n        children: \"Mac M1 Pro\"\n      }), \" was problematic. I had to install dlib from source- check the instruction in \", _jsx(_components.em, {\n        children: \"dlib\"\n      }), \" \", _jsx(_components.a, {\n        href: \"https://github.com/davisking/dlib\",\n        children: \"repo\"\n      }), \". For other architecture types, you should be able to specify \", _jsx(_components.em, {\n        children: \"dlib\"\n      }), \"  dependency in the \", _jsx(_components.em, {\n        children: \"conanfile.txt\"\n      }), \". Here is how I built and installed \", _jsx(_components.em, {\n        children: \"dlib\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-text\",\n        children: \"git clone git@github.com:davisking/dlib.git\\ncd dlib\\nmkdir build && cd build\\ncmake ..\\ncmake --build .\\nmake install\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"cmake\",\n      children: \"cmake\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"setting \", _jsx(_components.em, {\n        children: \"CMakeLists.txt\"\n      }), \":\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To use the \", _jsx(_components.em, {\n        children: \"cmake\"\n      }), \" build system in your project you need to create a \", _jsx(_components.em, {\n        children: \"CMakeLists.txt\"\n      }), \" file in your project root directory. This file will contain information about your project's dependencies. Here's an example of \", _jsx(_components.em, {\n        children: \"CMakeLists.txt\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-text\",\n        children: \"cmake_minimum_required(VERSION 2.8.12)\\nproject(APP)\\n\\n# C++ 20 standard\\nadd_compile_options(-std=c++20)\\n\\n\\nif(NOT CMAKE_BUILD_TYPE)\\nset(CMAKE_BUILD_TYPE Release)\\nendif()\\n\\nset(CMAKE_CXX_FLAGS \\\"-Wall -Wextra\\\")\\nset(CMAKE_CXX_FLAGS_DEBUG \\\"-g\\\")\\nset(CMAKE_CXX_FLAGS_RELEASE \\\"-O3\\\")\\n\\nfind_package(dlib REQUIRED)  \\n# Using the \\\"cmake\\\" generator\\ninclude(${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)\\nconan_basic_setup(TARGETS)\\n\\nadd_executable(app application.cpp)\\n\\ntarget_link_libraries(app CONAN_PKG::opencv dlib::dlib)\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Note: I use \", _jsx(_components.em, {\n        children: \"find_package\"\n      }), \" in CMakeList to find and reference the \", _jsx(_components.em, {\n        children: \"dlib\"\n      }), \" package I built in the previous step. This step is not needed if you were able to install \", _jsx(_components.em, {\n        children: \"dlib\"\n      }), \" using the Conan package manager, and in that case, you may have to add \", _jsx(_components.em, {\n        children: \"CONAN_PKG::dlib\"\n      }), \" reference in the \", _jsx(_components.em, {\n        children: \"target_link_libraries\"\n      }), \"; if not already done so by Conan. This can be controlled in Conan, see \", _jsx(_components.a, {\n        href: \"https://docs.conan.io/en/latest/integrations/build_system/cmake/cmake_find_package_generator.html\",\n        children: \"conan generators\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In this writeup, I give a basic overview of how to install conan, use Conan, and use CMake build system. For more details, you can refer to CMake and Conan documentations. Moreover, there are many other package managers (vcpkg, hunter etc.) and build systems  (bazel, ninja etc.) for C++ development. I am just going over one particular combination of a package manager and a build system (albeit, a popular one) to set up some demo projects, \", _jsx(_components.a, {\n        href: \"https://github.com/DDAK/AI_CPP\",\n        children: \"which I have put in my git repo\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"conclusion\",\n      children: \"Conclusion\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We've set up a robust C++ development environment for building high-performance AI applications on edge devices. This foundation will allow us to leverage C++'s power and efficiency in creating optimized AI solutions.\\nIn the next posts, we'll dive into practical AI applications, demonstrating how to use this environment to build and optimize AI models for edge deployment.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"id":"modern-cpp-ai"},"__N_SSG":true}