{"pageProps":{"postMetadata":{"title":"Haar Cascade Object Detection using OpenCV and C++.","description":"Building AI application using collection of C++ libraries and AI frameworks.","imgName":"haar/haar.jpeg","date":"Oct 15, 2024","tags":["AI","ML","C++","programming","Haar Cascade","OpenCV"],"keywords":["AI","ML","C++","programming","Haar Cascade","OpenCV"],"id":"haar"},"postContent":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    em: \"em\",\n    h2: \"h2\",\n    h6: \"h6\",\n    img: \"img\",\n    p: \"p\",\n    pre: \"pre\",\n    strong: \"strong\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"haar/haar.jpeg\",\n        alt: \"\\\"Haar Cascade Object Detection\\\"\"\n      })\n    }), \"\\n\", _jsxs(_components.h6, {\n      id: \"published-on-oct-15-2024\",\n      children: [\"Published on: \", _jsx(_components.strong, {\n        children: \"Oct 15, 2024\"\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"haar-cascade-in-c\",\n      children: \"Haar cascade in C++\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Haar cascade is a machine learning-based object detection method used in computer vision and image processing. It is named after the Haar wavelets, which are mathematical functions that form the basis of the Haar cascade algorithm. The Haar cascade algorithm uses a series of simple rectangular filters to detect objects in an image. The filters are applied to the input image in a sliding window manner, and the output of each filter is combined to make a decision about the presence of an object in the current window. The Haar cascade algorithm is fast, efficient, and has been widely used in various applications, such as face detection, license plate recognition, and others.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"getting-the-program\",\n      children: \"Getting the program\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Download the pretrained cascade detector for opencv git \", _jsx(_components.a, {\n        href: \"https://github.com/opencv/opencv/tree/master/data/haarcascades\",\n        children: \"repo\"\n      }), \". The opencv repo has many pretrained haar detector and I am using one of those in the example below.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"compiling-haar-c--program\",\n      children: \"Compiling haar C++  program\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Go into the haar folder and type:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-text\",\n        children: \"mkdir build && cd build\\nconan install ..\\ncmake ..\\ncmake --build .\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This will build the program. Sometime, you might need to install packages with \", _jsx(_components.em, {\n        children: \"conan install .. --build=missing\"\n      }), \" option enabled, when precompiled binaries are not available in the conan-center (remote repository).\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can run the \", _jsx(_components.em, {\n        children: \"haar\"\n      }), \" program from the build folder while passing the pre-trained haar cascade file with the path.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"For example:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-text\",\n        children: \"bin\\\\haar haarcascade_frontalcatface.xml\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"id":"haar"},"__N_SSG":true}